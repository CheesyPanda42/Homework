	++recursive_call_counter;
	std::cout << "\n******************entering SolveDFS (level " << level << ")*******************\n";

    //choose a variable by MRV
    Variable* var_to_assign = MinRemVal();
	//Variable* var_to_assign = MaxDegreeHeuristic();



while (!cg.AllVariablesAssigned() && !var_to_assign->IsImpossible() ) { //Impossible = empty available values set
	var_to_assign->Assign();
    std::map<Variable*, std::set<typename Variable::Value> > prevState = SaveState(var_to_assign);
	std::cout <<"Var: " <<  *var_to_assign << "   ;  assigned " << var_to_assign->GetValue() << std::endl;
	SolveDFS(++level);
    LoadState(prevState);

	    // Get constraints for current variable
    const std::vector<const Constraint*>& constraints = cg.GetConstraints(var_to_assign);
    Constraint const* curr_constraint;
    typename std::vector<const Constraint*>::const_iterator b_con = constraints.begin();
    typename std::vector<const Constraint*>::const_iterator e_con = constraints.end();

    for(;b_con < e_con; ++b_con)
    {
        ++iteration_counter;
        curr_constraint = *b_con;
        if (!curr_constraint->Satisfiable()) std::cout << "Contstraint can't be satisfied\n";
        std::cout << "\n++++++++Constraint:   " << *curr_constraint << " ++++++++++\n\n";
        if(curr_constraint->Check()) std::cout << "Constraint Satified\n";
        else
        {
            std::cout << "Removing value from variable\n";
            var_to_assign->RemoveValue( var_to_assign->GetValue() ); //deletes from the original
            std::cout << "Unassigning\n";
            var_to_assign->UnAssign();
            break;
        }
    }


}
    if (var_to_assign->IsImpossible())
    {
        return false;
    }
    std::cout<<"*********Exiting DFS Level " << level << "****************\n";
    return true;
	
	
	
	
	
	
	
	        if(!temp->IsAssigned() && var->IsAssigned())
        {
            var = temp;
            std::cout <<"Var reassigned: " << var->Name() << "  " << size_of_var << std::endl;

        }
        else
        {
           if(temp->SizeDomain() < size_of_var)
            {
                var = temp;
                std::cout <<"Var reassigned: " << var->Name() << "  " << size_of_var << std::endl;
            }
        }'
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		std::cout << "\n----IN SOLVEDFS LEVEL " << level << " -------\n";
	++recursive_call_counter;
	if (recursive_call_counter % 1000000 == 0){
        std::cout << "*******************\nRec count: " << recursive_call_counter;
        std::cout << "\nIt count : " << iteration_counter   <<"\n*******************\n";
	}

    // Variable declarations
    bool sol_found = false;
    bool con_holds = false;
   // int num_var;
    std::map<Variable*, std::set<typename Variable::Value> > prevState;
    const typename std::vector<Variable*>& all_var = cg.GetAllVariables();
   // num_var = all_var.size();


    Variable* var = MinRemVal();

    while (!cg.AllVariablesAssigned())// && !var->IsImpossible())
    {

        //Variable* var = MinRemVal();

        //if(!var->IsImpossible())
        //{
            var->Assign();
            prevState = SaveState(var);
            std::cout << var->Name() << "assigned " << var->GetValue() << std::endl;

            std::cout << "\n++STATE SAVED++\n";

            std::cout << "Going to next DFS\n Current variable is " << var->Name() << std::endl;
            sol_found = SolveDFS(level+1);
            std::cout << "I'm back!\n" << "Current variable is " << var->Name() << std::endl;

            if(!sol_found)
            {
                std::cout << "\n++STATE LOADED++\n";
                LoadState(prevState);
            }

            // Get constraints for current variable
            const std::vector<const Constraint*>& constraints = cg.GetConstraints(var);
            Constraint const* curr_constraint;
            // Iterators for constraint
            typename std::vector<const Constraint*>::const_iterator b_con = constraints.begin();
            typename std::vector<const Constraint*>::const_iterator e_con = constraints.end();

            for(;b_con < e_con; ++b_con)
            {
                ++iteration_counter;
                curr_constraint = *b_con;
                std::cout << "\nCurrent constraint " << *curr_constraint << std::endl;
                std::cout << "Checking constraint\n";
                con_holds = curr_constraint->Check();
                if(con_holds)
                {
                    std::cout << "Constraint holds\n";
                    sol_found = true;
                }
                else
                {
                    std::cout << "Constraint doesn't hold\n";
                    sol_found = false;
                    var->RemoveValue(var->GetValue());
                    var->UnAssign();
                    break;
                }

            }
        //}
       // else break;
    }


    std::cout << "\n----EXITING SOLVEDFS LEVEL " << level << " -------\n";
    return sol_found;
	
	
	
	
	
	
	
	while(!cg.AllVariablesAssigned())
{
    var->Assign();
    sol_found = SolveDFS(level+1);


    std::cout << "All variables assigned\n";
    while(!sol_found && !var->IsImpossible())
    {
        std::cout << "Entered while loop\n";
        if(!var->IsAssigned()) var->Assign();
        std::cout << var->Name() << "  assigned  " << var->GetValue() << std::endl;
        typename std::vector<const Constraint*>::const_iterator b_con = constraints.begin();
        typename std::vector<const Constraint*>::const_iterator e_con = constraints.end();
        for(;b_con < e_con; ++b_con)
        {
            curr_constraint = *b_con;
            con_holds = curr_constraint->Satisfiable();
            std::cout << "Checking constraint\n";
            if(con_holds) sol_found = true;
            else
            {
                std::cout << "Constraint failed\n";
                sol_found = false;
                var->RemoveValue(var->GetValue());
                var->UnAssign();
                break;
            }
            std::cout << "Constraint holds\n";
        }
        std::cout << "Looping....\n";
    }
    std::cout << "Left while loop\n";
}
    LoadState(prevState);
    std::cout << "\n----EXITING SOLVEDFS LEVEL " << level << " -------\n";